{"version":3,"file":"static/js/823.335f7ee6.chunk.js","mappings":"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","sources":["api/movies.js","pages/Movies/Movies.styled.js","components/SearchMovies/SearchMovies.styled.js","components/SearchMovies/SearchMovies.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZjc2OTA4ODZmODIxN2FiZjEyMGMyMjNhNWYxNDEyYiIsInN1YiI6IjY1ZGI4MTljY2FiZmU0MDE4NmQxYmI3MCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.n_mMnvljsxe6imM9UF46pVV1eqxnSfeB5tUjaDtgbHM',\n  },\n};\n\nconst getMoviesCollection = async () => {\n  try {\n    const response = await axios({\n      ...options,\n      url: 'https://api.themoviedb.org/3/trending/all/day',\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getTrendingMovies = async () => {\n  try {\n    const collection = await getMoviesCollection();\n    return collection.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  try {\n    const movies = await getTrendingMovies();\n    console.log(movies);\n    return movies.find(movie => movie.id === Number(id));\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getCast = async id => {\n  try {\n    const cast = await axios({\n      ...options,\n      url: `https://api.themoviedb.org/3/movie/${id}/credits`,\n    });\n    return cast.data.cast;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  try {\n    const reviews = await axios({\n      ...options,\n      url: `https://api.themoviedb.org/3/movie/${id}/reviews`,\n    });\n    return reviews.data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const findMoviesByName = async query => {\n  try {\n    const movie = await axios({\n      ...options,\n      url: `https://api.themoviedb.org/3/search/movie?query=${query}`,\n    });\n    return movie.data.results;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\n// export const cancelRequest = () => {\n//   abortController.abort();\n// };\n","import styled from '@emotion/styled';\n\nexport const MoviesWrapper = styled.li`\n  display: flex;\n  justify-content: row;\n  gap: 40px;\n  margin-top: 40px;\n`;\n\nexport const Title = styled.h1`\n  margin: 0;\n\n  text-transform: uppercase;\n  align-self: center;\n  margin-bottom: 10px;\n`;\n\nexport const Text = styled.p`\n  word-spacing: 2px;\n  line-height: 1.4;\n`;\n\nexport const Accent = styled.span`\n  text-transform: uppercase;\n  font-weight: 500;\n  color: #fcff00;\n`;\n\nexport const MovieThumb = styled.div`\n  display: block;\n  width: 260px;\n  height: auto;\n`;\n\nexport const Img = styled.img`\n  display: block;\n  width: 100%;\n`;\n","import styled from '@emotion/styled';\nimport { IoMdSearch } from 'react-icons/io';\n\nexport const SearchWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n`;\n\nexport const Search = styled.input`\n  width: 300px;\n  padding: 10px 26px;\n  background-color: #323232;\n  border: 2px solid #b4b7b9;\n  border-radius: 4px;\n\n  color: #f7eee8;\n\n  &:focus {\n    outline: none;\n    border-color: #fcff00;\n  }\n`;\n\nexport const SearchIcon = styled(IoMdSearch)`\n  position: absolute;\n  top: 12px;\n  left: 8px;\n`;\n\nexport const SearchButton = styled.button`\n  position: absolute;\n  height: 100%;\n  padding: 0 12px;\n  right: 0;\n\n  border: 2px solid #00000000;\n  background-color: #00000000;\n  color: #b4b7b9;\n  border-left: 2px solid #b4b7b9;\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n\n  cursor: pointer;\n\n  text-transform: uppercase;\n  transition: background 250ms ease-in-out, color 250ms ease-in-out,\n    border 250ms ease-in-out;\n\n  &:focus {\n    background-color: #fcff00;\n    color: #323232;\n  }\n\n  &:hover {\n    background-color: #fcff00;\n    color: #323232;\n  }\n\n  &:active {\n    background-color: #55555500;\n    color: #fcff00;\n  }\n`;\n","// import { useSearchParams } from 'react-router-dom';\nimport {\n  SearchWrapper,\n  Label,\n  Search,\n  SearchButton,\n} from './SearchMovies.styled';\nimport { SearchIcon } from './SearchMovies.styled';\nimport { useState } from 'react';\n\nconst SearchMovies = ({ updateQuery }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  return (\n    <SearchWrapper>\n      <Label>\n        <Search\n          type=\"text\"\n          value={searchQuery}\n          onChange={e => setSearchQuery(e.currentTarget.value)}\n        />\n        <SearchIcon />\n        <SearchButton onClick={() => updateQuery(searchQuery)} type=\"button\">\n          Search\n        </SearchButton>\n      </Label>\n    </SearchWrapper>\n  );\n};\n\nexport default SearchMovies;\n","import { findMoviesByName } from 'api/movies';\nimport SearchMovies from 'components/SearchMovies';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport {\n  Accent,\n  Img,\n  MovieThumb,\n  MoviesWrapper,\n  Text,\n  Title,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [isLoading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    setLoading(true);\n    try {\n      (async () => {\n        const movies = await findMoviesByName(query);\n        setMovies(movies);\n      })();\n    } catch (error) {\n      throw new Error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [query]);\n\n  const updateQueryString = query => {\n    const nextQuery = query !== '' ? { query } : {};\n    setSearchParams(nextQuery);\n  };\n\n  return (\n    <div>\n      <SearchMovies query={query} updateQuery={updateQueryString} />\n\n      {!isLoading && (\n        <ul>\n          {movies.map(\n            ({\n              id,\n              title,\n              overview,\n              poster_path,\n              vote_average,\n              release_date,\n            }) => (\n              <MoviesWrapper key={id}>\n                <MovieThumb>\n                  <Img\n                    src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                    alt={title}\n                  />\n                </MovieThumb>\n                <div>\n                  <Title>{title}</Title>\n                  <Text>{overview}</Text>\n                  <Text>\n                    <Accent>score </Accent>\n                    {vote_average}\n                  </Text>\n                  <Text>\n                    <Accent>release</Accent> {release_date}\n                  </Text>\n                </div>\n              </MoviesWrapper>\n            )\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["options","method","headers","accept","Authorization","getMoviesCollection","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","axios","_objectSpread","url","sent","abrupt","data","t0","Error","message","stop","apply","arguments","getTrendingMovies","_ref2","_callee2","collection","_context2","results","getMovieById","_ref3","_callee3","id","movies","_context3","console","log","find","movie","Number","_x","getCast","_ref4","_callee4","cast","_context4","concat","_x2","getReviews","_ref5","_callee5","reviews","_context5","_x3","findMoviesByName","_ref6","_callee6","query","_context6","_x4","MoviesWrapper","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Text","_templateObject3","Accent","_templateObject4","MovieThumb","_templateObject5","Img","_templateObject6","SearchWrapper","Label","Search","SearchIcon","IoMdSearch","SearchButton","updateQuery","_useState","useState","_useState2","_slicedToArray","searchQuery","setSearchQuery","_jsx","children","_jsxs","type","value","onChange","e","currentTarget","onClick","_searchParams$get","isLoading","setLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState3","_useState4","setMovies","get","useEffect","error","SearchMovies","map","title","overview","poster_path","vote_average","release_date","src","alt"],"sourceRoot":""}